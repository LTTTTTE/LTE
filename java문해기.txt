10. (실습) 아래 코드에서 배열 n에 저장된 0번째 자료를 삭제하여 배열의 내용이 다음과 같이 변
경되도록 아래 코드를 완성하시오.
- 실행결과: [4, 5, 6, 7, 0, 0, 0, 0, 0, 0]
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		
		int n[]={3,4,5,6,7,0,0,0,0,0};
		for(int i=0;i<n.length-1;i++) {
			n[i]=n[i+1];
		}
		System.out.println(Arrays.toString(n));
	}
}

13. (실습) 다음은 기존 자료가 저장되어 있는 배열의 0번째 위치에 새로운 자료를 삽입하여 기존
배열을 크기 1 증가된 배열로 변경하는 코드이다. System.arraycopy(s, 0, t, 1, s.length)를 반복
문으로 대체하여 작성하시오.
- System.arraycopy(s, 0, t, 1, s.length)는 s[i]를 t[j]에 대입하는 작업을 i=0,j=1부터 시작하여 s.length번
반복하는 함수이다.
- 삽입 전: [화, 수, 목, 금, 토, 일]
- 삽입 후: [월, 화, 수, 목, 금, 토, 일]

import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		char s[]= {'화','수','목','금','토','일'};
		System.out.println(Arrays.toString(s)); // 삽입 전
		char t[]=new char[s.length+1];
		
		for(int i=0;i<s.length;i++)
			t[i+1]=s[i];
		
		t[0]='월';
		s=t;
		System.out.println(Arrays.toString(s)); // 삽입 후
	}
}

11. (실습: removeFirst()) 아래 SimpleList의 removeFirst()는 연결리스트의 0번째 자료를 삭제하는
메소드이다. 아래 코드가 정상 실행되도록 removeFirst()를 완성하시오.
- removeFirst 실행 전 연결리스트: 4->3->2->1->0
- removeFirst 실행 후 연결리스트: 3->2->1->0
public class Node {
	int data;
	Node next;

	public Node(int data) {
		this.data = data;
	}
}

import javax.management.RuntimeErrorException;

public class SimpleList {
	Node head;
	int size;
	public void addFirst(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
		size++;
	}

	public void removeFirst() {
		if (head != null) {
		//	Node p = head;
			head = head.next;
		//	p.next = null;
		size--;	
		}
	}

	@Override
	public String toString() {
		String v = "";

		for (Node p = head; p != null; p = p.next) {
			if (v.length() > 0)
				v += "->";
			v += p.data;
		}
		return v;
	}
	public int size() {
		return size;
	}
	public int get(int i) {
		if(i<0||i>=size)throw new RuntimeErrorException(null, "범위오류");		Node p = head;
		while(i-->0)p=p.next;
		return p.data;
	}
}

public class Test {
	public static void main(String[] args) {
		SimpleList list = new SimpleList();
		for (int i = 1; i <= 5; i++)
			list.addFirst(i);
		System.out.println(list);
		list.removeFirst();
		System.out.println(list);
	//	System.out.println(list.get(-5));
	}
}


12. (실습: size(), get()) 아래 SimpleList의 size()는 연결리스트에 저장된 자료의 전체 개수를 반환
하는 메소드이다. 또한 SimpleList의 get(int index)는 연결리스트의 index번째 노드의 data 값
을 반환하는 메소드이다. 아래 Test 클래스는 연결리스트 4->3->2->1->0를 생성한 후 get()
메소드를 통해 각 노드의 자료를 가져와 출력하는 코드이다. 아래 코드가 정상 동작하도록
SimpleList를 수정하시오.
- 아래 코드 실행결과: 4 3 2 1 0

public class Node {
	int data;
	Node next;

	public Node(int data) {
		this.data = data;
	}
}

import javax.management.RuntimeErrorException;

public class SimpleList {
	Node head;
	int size;
	public void addFirst(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
		size++;
	}

	public void removeFirst() {
		if (head != null) {
		//	Node p = head;
			head = head.next;
		//	p.next = null;
		size--;	
		}
	}

	@Override
	public String toString() {
		String v = "";

		for (Node p = head; p != null; p = p.next) {
			if (v.length() > 0)
				v += "->";
			v += p.data;
		}
		return v;
	}
	public int size() {
		return size;
	}
	public int get(int i) {
		if(i<0||i>=size)throw new RuntimeErrorException(null, "범위오류");		Node p = head;
		while(i-->0)p=p.next;
		return p.data;
	}
}

public class Test {
	public static void main(String[] args) {
		SimpleList list = new SimpleList();
		for (int i = 0; i < 5; i++) list.addFirst(i);
		for (int i = 0; i < list.size(); i++) System.out.print(list.get(i)+" ");
	}
}


13. (실습: addLast()) 아래 코드가 연결리스트 1->2->3을 생성하도록 다음 두 가지 구현 방법 각
각에 대해 아래 SimpleList를 수정하시오. addLast(int data)는 연결리스트의 끝 위치에 새로운
자료 data를 추가하는 메소드이다. 두 구현 방법의 시간 복잡도는 각각 어떻게 되는가?
- 구현 방법 1: tail 필드를 추가하지 않고, head 필드만 사용하여 구현
- 구현 방법 2: tail 필드를 추가하고, tail 필드를 사용하여 구현

public class Node {
	int data;
	Node next;

	public Node(int data) {
		this.data = data;
	}
}

import javax.management.RuntimeErrorException;

public class SimpleList {
	Node head;
	Node tail;
	int size;

	public void addFirst(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
		size++;
	}

	public void addLast(int data) {

		if (head != null) {
			Node newNode = new Node(data);
			Node p = head;
			while (p.next != null)
				p = p.next;
			p.next = newNode;
		}
		if (head == null)
			head = new Node(data);
		///<Tail사용시>
		//@tail
		
		/*if(head==null)head=tail=new Node(data);
		else {
			tail.next=new Node(data);
			tail.tail.next;
		}*/
	}

	public void removeFirst() {
		if (head != null) {
			// Node p = head;
			head = head.next;
			// p.next = null;
			size--;
		}
	}

	@Override
	public String toString() {
		String v = "";

		for (Node p = head; p != null; p = p.next) {
			if (v.length() > 0)
				v += "->";
			v += p.data;
		}
		return v;
	}

	public int size() {
		return size;
	}

	public int get(int i) {
		if (i < 0 || i >= size)
			throw new RuntimeErrorException(null, "범위오류");
		Node p = head;
		while (i-- > 0)
			p = p.next;
		return p.data;
	}
}

public class Test {
	public static void main(String[] args) {
		SimpleList list = new SimpleList();
		list.addLast(1);
		list.addLast(2);
		list.addLast(3);
		System.out.println(list);
	}
}

14. (실습: removeLast()) SimpleList의 removeLast는 연결리스트의 끝 위치 자료를 삭제하는 메소
드이다. 아래 코드가 정상 동작하도록 SimpleList에 removeLast를 구현하시오. 지금까지 구현
한 SimpleList와 같은 단일연결리스트에서 구현된 removeLast는 어떤 단점이 있는가?

///리스트의 맨뒤것을 지워야하기 때문에 {O(n)}의 시간이 소요된다.

public class Node {
	int data;
	Node next;

	public Node(int data) {
		this.data = data;
	}
}

import javax.management.RuntimeErrorException;

public class SimpleList {
	Node head;
	Node tail;
	int size;

	public void addFirst(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
		size++;
	}

	public void addLast(int data) {

		if (head != null) {
			Node newNode = new Node(data);
			Node p = head;
			while (p.next != null)
				p = p.next;
			p.next = newNode;
		}
		if (head == null)
			head = new Node(data);
		// @tail

		/*
		 * if(head==null)head=tail=new Node(data); else { tail.next=new Node(data);
		 * tail.tail.next; }
		 */
	}

	public void removeFirst() {
		if (head != null) {
			// Node p = head;
			head = head.next;
			// p.next = null;
			size--;
		}
	}

	public void removeLast() {
		Node temp = head;
		while(temp.next.next!=null) {
			temp=temp.next;
		}
		temp.next=null;		
	}

	@Override
	public String toString() {
		String v = "";

		for (Node p = head; p != null; p = p.next) {
			if (v.length() > 0)
				v += "->";
			v += p.data;
		}
		return v;
	}

	public int size() {
		return size;
	}

	public int get(int i) {
		if (i < 0 || i >= size)
			throw new RuntimeErrorException(null, "범위오류");
		Node p = head;
		while (i-- > 0)
			p = p.next;
		return p.data;
	}
}

public class Test {
	public static void main(String[] args) {
		SimpleList list = new SimpleList();
		for (int i = 0; i < 5; i++)
			list.addLast(i);
		System.out.println(list);
		list.removeLast();
		System.out.println(list);
	}
}


16. (실습) 다음과 같이 동작하는 SimpleList를 이중연결리스트로 구현하시오.
- 실행결과:
2->1->9->8
1->9
